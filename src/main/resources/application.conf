akka {
    loglevel = "debug"
}

routersDemo {
    akka {
        actor.deployment {
            /poolMaster2 {
                router = round-robin-pool
                nr-of-instances = 5
            }

            /groupMaster2 {
                router = round-robin-group
                routees.paths = ["/user/slave_1","/user/slave_2","/user/slave_3","/user/slave_4","/user/slave_5"]
            }
        }
    }
}

# dispatchers demo
my-dispatcher-1thread {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
        fixed-pool-size = 1
    }
    throughput = 30
}

my-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
        fixed-pool-size = 3
    }
    throughput = 30
}

dispatchersDemo{
    akka.actor.deployment {
        /rtjvm {
            dispatcher = my-dispatcher
        }
    }
}

mySpecialConfig{
    akka {
        loglevel = "info"
    }
}

specialTimedAssertionsConfig {
    akka.test.single-expect-default = 0.3s
}

# intercepting log messages test
interceptingLogMessages {
    akka {
        loggers = ["akka.testkit.TestEventListener"]
        test {
            filter-leeway = 5s
        }
    }
}

# MailboxesDemo

mailboxesDemo {
    support-ticket-dispatcher {
        mailbox-type = "actorEssentials.AkkaInfrastructure.Mailboxes$SupportTicketPriorityMailbox"
    }
    control-mailbox {
        mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
    }
    akka.actor.deployment {
        /altControlAwareActor {
            mailbox = control-mailbox
        }
    }
}